#!/usr/bin/env bash

declare -i APTG_TRY_LIMIT="${APTG_TRY_LIMIT:-3}"
declare -x APTG_MIP_DUMP="${APTG_MIP_DUMP:-/tmp/apg_mip_dump}"

aptg_try() {
    declare -ri tryLimit="${APTG_TRY_LIMIT}"

    if [[ $# -lt 1 ]]; then
        echo "${BASH_SOURCE[0]}: ${FUNCNAME[0]}: no command"

        exit 1
    fi

    declare -i tryCount=0 tryDelay

    while ((tryCount <= tryLimit)); do
        if "$@"; then
            return
        fi

        if [[ "${tryCount}" -eq ${tryLimit} ]]; then
            return 1
        fi

        if [[ "${tryCount}" -eq 0 ]]; then
            tryDelay=1
        else
            tryDelay=$((tryDelay * 2))
        fi

        printf "Execution failed: %s\n" "ddd"
        printf "Execution retry %s / %s failed. Retrying in %s seconds...\n" "$((tryCount + 1))" "${tryLimit}" "${tryDelay}"

        sleep "${tryDelay}"

        ((tryCount++))
    done
}

aptg_clean() {
    {
        rm -fr /var/cache/apt/archives/
        rm -fr /var/lib/apt/lists/*
        rm -fr /var/log/apt/*
        rm -f  /var/log/dpkg.log
        rm -fr /tmp/*
    } && {
        return
    }

    return 1
}

aptg_mip_dump_remove() {
    if ! rm -f "${APTG_MIP_DUMP}"; then
        echo "${BASH_SOURCE[0]}: could not remove dump of manual installed packages ${APTG_MIP_DUMP}" >&2
    fi
}

aptg_purge_temporary_main() {
    if ! [[ -f "${APTG_MIP_DUMP:-}" ]]; then
        echo "${BASH_SOURCE[0]}: could not purge temporary installed packages without dump of manual installed ones: no file ${APTG_MIP_DUMP}"

        exit 1
    fi

    declare mipPackages

    if ! mipPackages="$(cat "${APTG_MIP_DUMP}")"; then
        echo "${BASH_SOURCE[0]}: could not read dump of manual installed packages from ${APTG_MIP_DUMP}" >&2

        exit 1
    fi

    if [[ -n "${mipPackages}" ]] && ! apt-mark manual "${mipPackages}" >/dev/null; then
        echo "${BASH_SOURCE[0]}: could not purge temporary installed packages without mark of manual installed packages"

        aptg_mip_dump_remove

        exit 1
    fi

    # shellcheck disable=SC2015
    apt-mark auto '.*' >/dev/null && {
        apt-get --assume-yes purge --auto-remove --option APT::AutoRemove::RecommendsImportant=false
    } || {
        echo "${BASH_SOURCE[0]}: could not complete purge of temporary installed packages" >&2

        aptg_mip_dump_remove

        exit 1
    }

    aptg_mip_dump_remove
    aptg_clean
}

aptg_install_main() {
    declare -a packages
    declare    temporaryMode="no" arg

    for arg in "$@"; do
        case "${arg}" in
            --temporary)
                temporaryMode="yes"
                ;;
            -*)
                echo "${BASH_SOURCE[0]}: invalid option: ${arg}" >&2

                exit 1
                ;;
            *)
                packages+=("${arg}")
        esac
    done

    aptg_try apt-get update || {
        echo "${BASH_SOURCE[0]}: could not re-synchronize the APT package index"

        exit 1
    }

    if [[ "${temporaryMode}" == "yes" ]]; then
        apt-mark showmanual >>"${APTG_MIP_DUMP}" || {
            echo "${BASH_SOURCE[0]}: could not to write dump of manual installed packages to ${APTG_MIP_DUMP}" >&2

            exit 1
        }
    fi

    aptg_try apt-get --assume-yes install --no-install-recommends "${packages[@]}" || {
        echo "${BASH_SOURCE[0]}: could not complete installation of: $*" >&2

        exit 1
    }

    if [[ "${temporaryMode}" == "no" ]]; then
        aptg_clean
    fi

    exit
}

aptg_show_help() {
    echo "no help entry"
}

aptg_main() {
    if [[ $# -eq 0 ]]; then
        aptg_show_help

        exit 1
    fi

    while [[ $# -gt 0 ]]; do
        case "$1" in
            install)
                shift
                aptg_install_main "$@"
                ;;
            purge-temporary)
                shift
                aptg_purge_temporary_main "$@"
                ;;
            *)
                echo "${BASH_SOURCE[0]}: invalid command" >&2

                exit 1
                ;;
        esac
    done
}

aptg_main "$@"
